#!/bin/sh
show_help () {
echo "usage: llvm-config <OPTION>... [<COMPONENT>...]

Get various configuration information needed to compile programs which use
LLVM.  Typically called from 'configure' scripts.  Examples:
  llvm-config --cxxflags
  llvm-config --ldflags
  llvm-config --libs engine bcreader scalaropts

Options:
  --version         Print LLVM version.
  --prefix          Print the installation prefix.
  --src-root        Print the source root LLVM was built from.
  --obj-root        Print the object root used to build LLVM.
  --bindir          Directory containing LLVM executables.
  --includedir      Directory containing LLVM headers.
  --libdir          Directory containing LLVM libraries.
  --cppflags        C preprocessor flags for files that include LLVM headers.
  --cflags          C compiler flags for files that include LLVM headers.
  --cxxflags        C++ compiler flags for files that include LLVM headers.
  --ldflags         Print Linker flags.
  --system-libs     System Libraries needed to link against LLVM components.
  --libs            Libraries needed to link against LLVM components.
  --libnames        Bare library names for in-tree builds.
  --libfiles        Fully qualified library filenames for makefile depends.
  --components      List of all possible components.
  --targets-built   List of all targets currently built.
  --host-target     Target triple used to configure LLVM.
  --build-mode      Print build mode of LLVM tree (e.g. Debug or Release).
  --assertion-mode  Print assertion mode of LLVM tree (ON or OFF).
  --build-system    Print the build system used to build LLVM (always cmake).
  --has-rtti        Print whether or not LLVM was built with rtti (YES or NO).
  --has-global-isel Print whether or not LLVM was built with global-isel support (YES or NO).
  --shared-mode     Print how the provided components can be collectively linked (\`shared\` or \`static\`).
  --link-shared     Link the components as shared libraries.
  --link-static     Link the component libraries statically.                                                                                                                                 
Typical components:                                                                                                                                                                          
  all               All LLVM libraries (default).                                                                                                                                            
  engine            Either a native JIT or a bitcode interpreter."
}

handle_args () {
	case "${1##--}" in
		version) echo "@_PKG_MAJOR_VERSION@";;
		prefix) echo "@TERMUX_PREFIX@";;
		src-root) echo "@TERMUX_PKG_SRCDIR@";;
		obj-root) echo "@TERMUX_PREFIX@";;
		bindir) echo "@TERMUX_PREFIX@/bin";;
		includedir) echo "@TERMUX_PREFIX@/include";;
		libdir) echo "@TERMUX_PREFIX@/lib";;
		cppflags) echo "@CPPFLAGS@";;
		cflags) echo "@CFLAGS@";;
		cxxflags) echo "@CXXFLAGS@";;
		ldflags) echo "@LDFLAGS@";;
		system-libs) echo "-lc -ldl -lcurses -lz -lm";;
		libs) echo "-lLLVM";;
		libnames) echo "libLLVM.so";;
		libfiles) echo "@TERMUX_PREFIX@/lib/libLLVM.so";;
		components) ;; #TODO: to be completed
		targets-built) echo "@LLVM_TARGET_ARCH@";;
		host-target) echo "@LLVM_DEFAULT_TARGET_TRIPLE@";;
		build-mode) echo "Release";;
		assertion-mode) echo "OFF";;
		build-system) echo "cmake";;
		has-rtti) echo "NO";;
		has-global-isel) echo "OFF";;
		shared-mode) echo "shared";;
		# don't know what these do
		link-shared) ;;
		link-static) ;;
		*) show_help;;
	esac
}

for arg in $@; do handle_args $arg; done

