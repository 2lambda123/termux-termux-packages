--- ../cache/MPD-0.20.6/doc/mpdconf.example	2017-03-10 15:57:59.000000000 +0000
+++ ./doc/mpdconf.example	2017-05-14 01:15:58.706554156 +0000
@@ -10,14 +10,14 @@
 # be disabled and audio files will only be accepted over ipc socket (using
 # file:// protocol) or streaming files over an accepted protocol.
 #
-#music_directory		"~/music"
+music_directory		"/sdcard/Music"
 #
 # This setting sets the MPD internal playlist directory. The purpose of this
 # directory is storage for playlists created by MPD. The server will use 
 # playlist files not created by the server but only if they are in the MPD
 # format. This setting defaults to playlist saving being disabled.
 #
-#playlist_directory		"~/.mpd/playlists"
+playlist_directory		"~/.mpd/playlists"
 #
 # This setting sets the location of the MPD database. This file is used to
 # load the database at server start up and store the database while the 
@@ -25,7 +25,7 @@
 # MPD to accept files over ipc socket (using file:// protocol) or streaming
 # files over an accepted protocol.
 #
-#db_file			"~/.mpd/database"
+db_file			"~/.mpd/database"
 # 
 # These settings are the locations for the daemon log files for the daemon.
 # These logs are great for troubleshooting, depending on your log_level
@@ -40,19 +40,19 @@
 # for use of mpd --kill and some init scripts. This setting is disabled by
 # default and the pid file will not be stored.
 #
-#pid_file			"~/.mpd/pid"
+pid_file			"~/.mpd/pid"
 #
 # This setting sets the location of the file which contains information about
 # most variables to get MPD back into the same general shape it was in before
 # it was brought down. This setting is disabled by default and the server 
 # state will be reset on server start up.
 #
-#state_file			"~/.mpd/state"
+state_file			"~/.mpd/state"
 #
 # The location of the sticker database.  This is a database which
 # manages dynamic information attached to songs.
 #
-#sticker_file			"~/.mpd/sticker.sql"
+sticker_file			"~/.mpd/sticker.sql"
 #
 ###############################################################################
 
@@ -82,7 +82,7 @@
 #bind_to_address		"any"
 #
 # And for Unix Socket
-#bind_to_address		"~/.mpd/socket"
+bind_to_address		"~/.mpd/socket"
 #
 # This setting is the TCP port that is desired for the daemon to get assigned
 # to.
@@ -205,28 +205,6 @@
 # blocks. Setting this block is optional, though the server will only attempt
 # autodetection for one sound card.
 #
-# An example of an ALSA output:
-#
-#audio_output {
-#	type		"alsa"
-#	name		"My ALSA Device"
-##	device		"hw:0,0"	# optional
-##	mixer_type      "hardware"	# optional
-##	mixer_device	"default"	# optional
-##	mixer_control	"PCM"		# optional
-##	mixer_index	"0"		# optional
-#}
-#
-# An example of an OSS output:
-#
-#audio_output {
-#	type		"oss"
-#	name		"My OSS Device"
-##	device		"/dev/dsp"	# optional
-##	mixer_type      "hardware"	# optional
-##	mixer_device	"/dev/mixer"	# optional
-##	mixer_control	"PCM"		# optional
-#}
 #
 # An example of a shout output (for streaming to Icecast):
 #
@@ -286,41 +264,37 @@
 ##	sink		"remote_server_sink"	# optional
 #}
 #
-# An example of a winmm output (Windows multimedia API).
-#
-#audio_output {
-#	type		"winmm"
-#	name		"My WinMM output"
-##	device		"Digital Audio (S/PDIF) (High Definition Audio Device)" # optional
-#		or
-##	device		"0"		# optional
-##	mixer_type	"hardware"	# optional
-#}
+
+
+# An example of an opensl android output.
+audio_output {
+        type            "sles"
+        name            "OpenSLES output"
+        mixer_type      "software"
+}
+
+
+
 #
 # An example of an openal output.
 #
-#audio_output {
-#	type		"openal"
-#	name		"My OpenAL output"
-##	device		"Digital Audio (S/PDIF) (High Definition Audio Device)" # optional
-#}
-#
-# An example of an sndio output.
-#
-#audio_output {
-#	type		"sndio"
-#	name		"sndio output"
-#	mixer_type	"software"
-#}
-#
-# An example of an OS X output:
+audio_output {
+	type		"openal"
+	name		"OpenAL output"
+	mixer_type	"software"
+	device		"OpenSL"
+	enabled		"no"
+}
+#Fifo output for visualizations in ncmpcpp-git
+ audio_output {
+        type            "fifo"
+        name            "ncmpcpp visualizer"
+        path            "~/../usr/tmp/mpd.fifo"
+        format          "44100:16:1"
+	enabled		"no"
+}
+
 #
-#audio_output {
-#	type		"osx"
-#	name		"My OS X Device"
-##	device		"Built-in Output"	# optional
-##	channel_map      "-1,-1,0,1"	# optional
-#}
 #
 ## Example "pipe" output:
 #
