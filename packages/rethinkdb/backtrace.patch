diff --git a/src/backtrace.cc b/src/backtrace.cc
index 9ac88eeb29..c89b95d59b 100644
--- a/src/backtrace.cc
+++ b/src/backtrace.cc
@@ -7,7 +7,12 @@
 #include <atomic>
 #else
 #include <cxxabi.h>
+#ifdef (__ANDROID__)
+#include <unwind.h>
+#include <dlfcn.h>
+#else
 #include <execinfo.h>
+#endif
 #include <sys/wait.h>
 #endif
 
@@ -203,6 +208,55 @@ std::string address_to_line_t::address_to_line(const std::string &executable, co
 }
 #endif
 
+#ifdef (__ANDROID__)
+namespace {
+
+struct BacktraceState
+{
+    void** current;
+    void** end;
+};
+
+static _Unwind_Reason_Code unwindCallback(struct _Unwind_Context* context, void* arg)
+{
+    BacktraceState* state = static_cast<BacktraceState*>(arg);
+    uintptr_t pc = _Unwind_GetIP(context);
+    if (pc) {
+        if (state->current == state->end) {
+            return _URC_END_OF_STACK;
+        } else {
+            *state->current++ = reinterpret_cast<void*>(pc);
+        }
+    }
+    return _URC_NO_REASON;
+}
+
+}
+
+size_t captureBacktrace(void** buffer, size_t max)
+{
+    BacktraceState state = {buffer, buffer + max};
+    _Unwind_Backtrace(unwindCallback, &state);
+
+    return state.current - buffer;
+}
+
+void dumpBacktrace(std::ostream& os, void** buffer, size_t count)
+{
+    for (size_t idx = 0; idx < count; ++idx) {
+        const void* addr = buffer[idx];
+        const char* symbol = "";
+
+        Dl_info info;
+        if (dladdr(addr, &info) && info.dli_sname) {
+            symbol = info.dli_sname;
+        }
+
+        os << "  #" << std::setw(2) << idx << ": " << addr << "  " << symbol << "\n";
+    }
+}
+#endif
+
 std::string format_backtrace(bool use_addr2line) {
     lazy_backtrace_formatter_t bt;
     return use_addr2line ? bt.lines() : bt.addrs();() : bt.addrs();

